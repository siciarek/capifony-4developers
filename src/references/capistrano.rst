Capistrano - Swiss Army Knife
=============================

``Capistrano`` jest napisanym w języku ``ruby`` systemem zdalnego zarządzania zasobami serwerów, przeznaczonym dla
dowolnego języka programowania. Może służyć do wdrażania lub zdalnego wykonywania komend
na wielu serwerach jednocześnie.

System powstał z myślą o wdrażaniu projektów ``ruby on rails``, jednak jego funkcjonalność
jest na tyle uniwersalna, że może służyć właściwie dla każdego języka programowania i każdego typu projektu.

Instalacja
----------

``Capistrano`` jest dostępny jako pakiet ``gem`` dla ``ruby``.

.. code-block:: bash

    $ gem -v
    1.8.23

Najniższa wymagana wersja to ``1.3.x``, jeżeli nie nie posiadasz takiej, należy przeprowadzić aktualizację a następnie wykonać komendę:

.. code-block:: bash

    $ gem install capistrano

Po pomyślnie wykonanej instalacji powinno być możliwe wykonanie poniższej komendy:

.. code-block:: none

    $ cap --help
    Usage: cap [options] action ...
        -d, --debug                      Prompts before each remote command execution.
        -e, --explain TASK               Displays help (if available) for the task.
        -F, --default-config             Always use default config, even with -f.
        -f, --file FILE                  A recipe file to load. May be given more than once.
        -H, --long-help                  Explain these options and environment variables.
        -h, --help                       Display this help message.
        -l [STDERR|STDOUT|file],         Choose logger method. STDERR used by default.
            --logger
        -n, --dry-run                    Prints out commands without running them.
        -p, --password                   Immediately prompt for the password.
        -q, --quiet                      Make the output as quiet as possible.
        -r, --preserve-roles             Preserve task roles
        -S, --set-before NAME=VALUE      Set a variable before the recipes are loaded.
        -s, --set NAME=VALUE             Set a variable after the recipes are loaded.
        -T, --tasks [PATTERN]            List all tasks (matching optional PATTERN) in the loaded recipe files.
        -t, --tool                       Abbreviates the output of -T for tool integration.
        -V, --version                    Display the Capistrano version, and exit.
        -v, --verbose                    Be more verbose. May be given more than once.
        -X, --skip-system-config         Don't load the system config file (capistrano.conf)
        -x, --skip-user-config           Don't load the user config file (.caprc)


Skrypt ``cap``
--------------

Skrypt ``cap`` jest narzędziem umożliwiającym połączenie ze zdalnymi serwerami i wykonywanie
na nich komend.

.. code-block:: bash

    $ cat `which cap`
    #!/usr/bin/ruby1.9.1
    #
    # This file was generated by RubyGems.
    #
    # The application 'capistrano' is installed as part of a gem, and
    # this file is here to facilitate running it.
    #

    require 'rubygems'

    version = ">= 0"

    if ARGV.first
      str = ARGV.first
      str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
      if str =~ /\A_(.*)_\z/
        version = $1
        ARGV.shift
      end
    end

    gem 'capistrano', version
    load Gem.bin_path('capistrano', 'cap', version)

Lista dostępnych komend po wydaniu polecenia

.. code-block:: bash

    $ cap -T
    $ cap -vT
    $ cap -T doctrine

Skryptu można używać z linii komend podając odpowiednie parametry:

.. code-block:: bash

    $ cap invoke HOSTS="new.ses-control.com,platform.ses-support.com" COMMAND="date"

.. code-block:: text

      * 2014-04-03 10:36:44 executing `invoke'
      * executing multiple commands in parallel
        -> "else" :: "date"
        -> "else" :: "date"
        servers: ["new.ses-control.com", "platform.ses-support.com"]
        [new.ses-control.com] executing command
        [platform.ses-support.com] executing command
     ** [out :: new.ses-control.com] czw, 3 kwi 2014, 10:36:44 CEST
     ** [out :: platform.ses-support.com] czw, 3 kwi 2014, 10:36:44 CEST
     command finished in 44ms

Jeżeli do komendy wymagane jest ``sudo`` przekazujemy dodatkowy parametr:

.. code-block:: bash

    $ cap invoke HOSTS="new.ses-control.com,platform.ses-support.com" COMMAND="date" SUDO=1

Tu niestety może pojawić się błąd:

.. code-block:: none

      * 2014-04-03 10:51:12 executing `invoke'
      * executing multiple commands in parallel
        -> "else" :: "sudo -p 'sudo password: ' date"
        -> "else" :: "sudo -p 'sudo password: ' date"
        servers: ["new.ses-control.com", "platform.ses-support.com"]
        [platform.ses-support.com] executing command
        [new.ses-control.com] executing command
    *** [err :: platform.ses-support.com] sudo
    *** [err :: platform.ses-support.com] :
    *** [err :: platform.ses-support.com] no tty present and no askpass program specified
    *** [err :: platform.ses-support.com]
    *** [err :: new.ses-control.com] sudo
    *** [err :: new.ses-control.com] :
    *** [err :: new.ses-control.com] no tty present and no askpass program specified
    *** [err :: new.ses-control.com]
        command finished in 87ms
    failed: "sh -c 'sudo -p '\\''sudo password: '\\'' date'" on new.ses-control.com,platform.ses-support.com

Aby umożliwić wykonywanie komend sudo musimy utworzyć plik konfiguracyjny i dodać linijkę:

.. code-block:: ruby

    default_run_options[:pty] = true


Poniżej domyślne nazwy plików konfiguracyjnych dla ``cap``.

``/etc/capistrano.conf`` - ustawienie globalne serwera (pomijany parametrem ``--skip-system-config``)

``~/.caprc file`` - ustawienie dla konta użytkownika (pomijany parametrem ``--skip-user-config``)

``./Capfile`` - ustawienie dla projektu

``deploy.rb`` - alternatywne ustawienie dla projektu


Automatyczne tworzenie pliku konfiguracji
-----------------------------------------

Plik konfiguracyjny dla projektu można utworzyć automatycznie:

.. code-block:: bash

    $ cd /path/to/your/project
    $ capify .

.. code-block:: none

    [add] writing '/path/to/your/project/Capfile'
    [add] making directory '/path/to/your/project/config'
    [add] writing '/path/to/your/project/config/deploy.rb'
    [done] capified!

Zawartość katalogu ``/path/to/your/project``:

.. code-block:: none

    $ ls -R /path/to/your/project
    /path/to/your/project:
    Capfile  config

    /path/to/your/project/config:
    deploy.rb

Zawartość ``/path/to/your/project/Capfile``

.. literalinclude:: ../samples/capify/Capfile
    :language: ruby

Zawartość ``/path/to/your/project/deploy.rb``

.. literalinclude:: ../samples/capify/deploy.rb
    :language: ruby


Przykładowa konfiguracja w pliku ``Capfile``
--------------------------------------------

.. literalinclude:: ../samples/capistrano/Capfile
    :language: ruby


Powyższa konfiguracja umożliwia wykonanie komend bez podawania listy serwerów.

.. code-block:: bash

    $ cap invoke COMMAND="date"
    $ cap invoke COMMAND="date" SUDO=1
